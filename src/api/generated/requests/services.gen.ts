// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { UsersControllerCreateUserData, UsersControllerCreateUserError, UsersControllerCreateUserResponse, UsersControllerGetAllUsersData, UsersControllerGetAllUsersError, UsersControllerGetAllUsersResponse, UsersControllerGetUserByIdData, UsersControllerGetUserByIdError, UsersControllerGetUserByIdResponse, UsersControllerDeleteUserByPhoneNumberData, UsersControllerDeleteUserByPhoneNumberError, UsersControllerDeleteUserByPhoneNumberResponse, UsersControllerUpdateUserPointsData, UsersControllerUpdateUserPointsError, UsersControllerUpdateUserPointsResponse, ProductControllerCreateProductData, ProductControllerCreateProductError, ProductControllerCreateProductResponse, ProductControllerGetProductsData, ProductControllerGetProductsError, ProductControllerGetProductsResponse, ProductControllerUpdateProductData, ProductControllerUpdateProductError, ProductControllerUpdateProductResponse, ProductControllerDeleteProductData, ProductControllerDeleteProductError, ProductControllerDeleteProductResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Создать нового пользователя
 */
export const usersControllerCreateUser = <ThrowOnError extends boolean = false>(options: Options<UsersControllerCreateUserData, ThrowOnError>) => { return (options?.client ?? client).post<UsersControllerCreateUserResponse, UsersControllerCreateUserError, ThrowOnError>({
    ...options,
    url: '/users'
}); };

/**
 * Получить список пользователей с фильтрацией и пагинацией
 */
export const usersControllerGetAllUsers = <ThrowOnError extends boolean = false>(options?: Options<UsersControllerGetAllUsersData, ThrowOnError>) => { return (options?.client ?? client).get<UsersControllerGetAllUsersResponse, UsersControllerGetAllUsersError, ThrowOnError>({
    ...options,
    url: '/users'
}); };

/**
 * Получить пользователя по ID
 */
export const usersControllerGetUserById = <ThrowOnError extends boolean = false>(options: Options<UsersControllerGetUserByIdData, ThrowOnError>) => { return (options?.client ?? client).get<UsersControllerGetUserByIdResponse, UsersControllerGetUserByIdError, ThrowOnError>({
    ...options,
    url: '/users/{id}'
}); };

/**
 * Удалить пользователя по id
 */
export const usersControllerDeleteUserByPhoneNumber = <ThrowOnError extends boolean = false>(options: Options<UsersControllerDeleteUserByPhoneNumberData, ThrowOnError>) => { return (options?.client ?? client).delete<UsersControllerDeleteUserByPhoneNumberResponse, UsersControllerDeleteUserByPhoneNumberError, ThrowOnError>({
    ...options,
    url: '/users/{id}'
}); };

/**
 * Обновить количество баллов у пользователя
 */
export const usersControllerUpdateUserPoints = <ThrowOnError extends boolean = false>(options: Options<UsersControllerUpdateUserPointsData, ThrowOnError>) => { return (options?.client ?? client).patch<UsersControllerUpdateUserPointsResponse, UsersControllerUpdateUserPointsError, ThrowOnError>({
    ...options,
    url: '/users/{userId}'
}); };

/**
 * Создать новый продукт
 */
export const productControllerCreateProduct = <ThrowOnError extends boolean = false>(options: Options<ProductControllerCreateProductData, ThrowOnError>) => { return (options?.client ?? client).post<ProductControllerCreateProductResponse, ProductControllerCreateProductError, ThrowOnError>({
    ...options,
    url: '/products'
}); };

/**
 * Получить список продуктов с фильтрацией и сортировкой
 */
export const productControllerGetProducts = <ThrowOnError extends boolean = false>(options?: Options<ProductControllerGetProductsData, ThrowOnError>) => { return (options?.client ?? client).get<ProductControllerGetProductsResponse, ProductControllerGetProductsError, ThrowOnError>({
    ...options,
    url: '/products'
}); };

/**
 * Обновить продукт
 */
export const productControllerUpdateProduct = <ThrowOnError extends boolean = false>(options: Options<ProductControllerUpdateProductData, ThrowOnError>) => { return (options?.client ?? client).patch<ProductControllerUpdateProductResponse, ProductControllerUpdateProductError, ThrowOnError>({
    ...options,
    url: '/products/{id}'
}); };

/**
 * Удалить продукт
 */
export const productControllerDeleteProduct = <ThrowOnError extends boolean = false>(options: Options<ProductControllerDeleteProductData, ThrowOnError>) => { return (options?.client ?? client).delete<ProductControllerDeleteProductResponse, ProductControllerDeleteProductError, ThrowOnError>({
    ...options,
    url: '/products/{id}'
}); };